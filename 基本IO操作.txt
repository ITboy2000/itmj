package lesson2;

import org.junit.Test;

import java.io.*;
import java.util.Arrays;

public class FileOperatorTest {
    @Test
    public void fileRead_1() throws IOException {
        //字节流转换字符流，需要使用字节字符转换流
        //转换流可以设置编码：Java文件编码格式，文件编码格式
        //InputStreamReader：输入字节字符转换流 or OutStreamReader：输出字节字符转换流
        FileInputStream fis = new FileInputStream(
                new File("D:\\javaWeb\\io-study\\res\\info.txt"));
        BufferedReader br = new BufferedReader(new InputStreamReader(fis, "utf-8"));
        //字符流按行读取
//        String line;
//        while ((line=br.readLine())!=null){
//            System.out.println(line);
//        }
        //字符流按字符数组读取
        char[] chars = new char[1024];
        int len = 0;
        while ((len = br.read(chars, 0, 1024)) != -1) {
            String str = new String(chars, 0, len);
            System.out.println(str);
        }
    }

    @Test
    public void fileRead_2() throws IOException {
        //字节流转换字符流，需要使用字节字符转换流
        //转换流可以设置编码：Java文件编码格式，文件编码格式
        //InputStreamReader：输入字节字符转换流 or OutStreamReader：输出字节字符转换流
        FileInputStream fis = new FileInputStream(
                new File("D:\\javaWeb\\io-study\\res\\info.txt"));
        //按字节读取
        byte[] bytes = new byte[1024];
        int len;
        /*while ((len=fis.read(bytes,0,1024))!=-1){
            String str=new String(bytes,0,len);
            System.out.println(str);
        }*/
        while ((len = fis.read(bytes)) != -1) {
            String str = new String(bytes, 0, len);
            System.out.println(str);
        }
    }

    @Test
    public void fileWrite_1() throws IOException {
        FileOutputStream fos = new FileOutputStream(
                new File("D:\\javaWeb\\io-study\\res\\info.txt"));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos, "utf-8"));
        //使用缓冲流，输出的时候，需要进行flush刷新一下，否则不会真实的写入到目的设备中
        bw.write("我很想\n");//write写数据当系统内存缓冲区
        bw.write("柳姐");
        bw.flush();
    }

    @Test
    public void copyFile_1() throws IOException {
        //复制本地文件
        String srcPath = "D:\\javaWeb\\io-study\\res\\miss.txt";
        String destPath = "D:\\javaWeb\\io-study\\res\\miss2.txt";
        FileInputStream fis = new FileInputStream(
                new File(srcPath));
        FileOutputStream fos = new FileOutputStream(
                new File(destPath));
        byte[] bytes = new byte[1024];
        int len = -1;
        while ((len = fis.read(bytes)) != -1) {
            fos.write(bytes, 0, len);
            fos.flush();
        }
    }
    @Test
    public void copyFile_2() {
        //使用缓冲流进行文件的拷贝
        FileInputStream fis=null;
        BufferedInputStream bis=null;
        FileOutputStream fos=null;
        BufferedOutputStream bos=null;
        try {
         fis = new FileInputStream(
                new File("D:\\javaWeb\\io-study\\res\\miss.txt"));
         bis=new BufferedInputStream(fis);
         fos = new FileOutputStream(
                new File("D:\\javaWeb\\io-study\\res\\miss3.txt"));
         bos=new BufferedOutputStream(fos);
        byte[] bytes=new byte[1024];//根据文件大小可对数组参数进行调整
        int len;
        while ((len=bis.read(bytes))!=-1){
            fos.write(bytes);
            bos.flush();
        }
        }catch (IOException e){
            e.printStackTrace();
        }finally {//IO流操作完成后一定要释放资源，顺序是根据依赖关系反向释放
            if (bos!=null){
                try {
                    bos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (fos!=null){
                try {
                    fos.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (bis!=null){
                try {
                    bis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (fis!=null){
                try {
                    fis.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
